#!/usr/bin/env python3

from sys import argv
import os
import re
import pytest


def get_format_new(path_old):
    # split by -
    parts = path_old.split('-')
    parts_alt = path_old.split(' - ')

    if len(parts) >= 3:
        part_auth = parts_alt[0]
        part_publ = parts[-1]
        # there may have been dashes in the title
        # join them back
        # Addison-Wesley is an exception
        end = -1 if parts[-2] != "Addison" else -2
        # if somebody has a double-barrelled name
        # then part_title will contain that second part
        # so we must deduct the size of part_title
        # according to the difference
        begin = 1 + part_auth.count('-')
        part_title = '-'.join(parts[begin:end])
    elif len(parts) == 2:
        part_auth, part_title = parts
        part_publ = None
    else:
        raise ValueError("Bad input filename")

    # check if the fname has a series descriptor (to be discarded)
    m = re.search(r"^\(([^)]+)\)?(.*)", part_auth)
    if m:
        # not good
        part_auth = m.groups()[1]

    # get the last name of the first author
    # if there are exactly two authors, get their names
    authors = part_auth.split(',')
    assert ')' not in authors
    if len(authors) == 2:
        auth = authors[0].split()[-1] + ' ' + authors[1].split()[-1]
    else:
        auth = authors[0].split()[-1]
    # omit subtitle
    title = part_title.split('_')[0].strip()

    m = re.search(r".*\(([0-9]{4})\)", part_publ) if part_publ else None
    year = m.groups()[0] if m else 0

    ext = path_old.split('.')[-1]

    format_final = f"{auth} {year:04} {title}.{ext}"

    # TBC
    # todo rename the display browser name of pdf
    # todo produce a toc / bookmarks from a table title-size
    # todo add tests
    # todo handle (eds)

    return format_final


def rename_path(path_old, options):
    opt_debug = "-d" in options
    opt_verbose = "-v" in options

    dir_old = os.path.dirname(path_old)
    base_old = os.path.basename(path_old)
    base_new = get_format_new(base_old)
    path_new = os.path.join(dir_old, base_new)

    print(path_old, '==>', base_new)
    if not opt_debug:
        os.rename(path_old, path_new)


if __name__ == '__main__':
    options = [arg for arg in argv[1:] if arg.startswith('-')]
    paths = [arg for arg in argv[1:] if not arg.startswith('-')]

    for path in paths:
        rename_path(path, options)

# usage:
# rnlg file0...fileN [options]
# example usage, one file:
# ls --zero [file name] | xargs -0 python [this script name]
# example usage, many files:


@pytest.mark.parametrize('fname_out_expected, fname_in', [
    ('Plath 1963 The Bell Jar', 'Sylvia Plath - The Bell Jar (1963).pdf'),
    ('Zamyatin 1993 We.pdf', 'Yevgeny Zamyatin - We (Мы) (1993).pdf'),
    ('Hesse 2002 Steppenwolf.pdf', 'Hermann Hesse - Steppenwolf_ A Novel (2002).pdf'),
    ('Ellis 1991 American Psycho.pdf', 'Bret Easton Ellis - American Psycho -Vintage (1991).pdf'),
    ('Victoria 2006 Zen at War.epub', '(War and Peace Library) Brian Daizen Victoria - Zen at War (War and Peace Library)-Rowman & Littlefield Publishers (2006).epub'),
])
def test_main(fname_out_expected, fname_in):
    fname_out_actual = get_format_new(fname_in)
    assert fname_out_expected == fname_out_actual
